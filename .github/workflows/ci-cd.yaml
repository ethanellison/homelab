name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}


jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate Kubernetes manifests
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          ./kustomize version
          
          # Validate Kubernetes manifests
          echo "Validating infrastructure manifests..."
          ./kustomize build infrastructure/kubernetes/base
          
          echo "Validating application manifests..."
          # ./kustomize build applications/kubernetes/base
          
          # Add more validation steps as needed

      - name: Validate Docker Compose files
        run: |
          # Install Docker Compose V2
          DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
          mkdir -p $DOCKER_CONFIG/cli-plugins
          curl -SL https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
          chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
          
          # Validate Docker Compose files
          echo "Validating local environment compose files..."
          docker compose -f applications/compose/environments/local/docker-compose.yaml config
          
          echo "Validating VPS environment compose files..."
          docker compose -f applications/compose/environments/vps/docker-compose.yaml config

  deploy:
    needs: validate
    # if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    concurrency: production_environment
    
    steps:
      - uses: actions/checkout@v4

      - name: Tailscale
        uses: tailscale/github-action@v4
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      - name: Tailscale
        uses: tailscale/github-action@v4
        with:
          ping: srv715735.dzo-byzantine.ts.net

      # - name: Deploy to VPS
      #   env:
      #     HOST: srv715735.dzo-byzantine.ts.net
      #     USERNAME: root
      #     DEPLOY_PATH: ${{ vars.DEPLOY_PATH }}
      #     GIT_URL: https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
      #     # ENV_FILE: ${{ vars.ENV_FILE }}     
      #     run: |
      #       # Ensure deploy directory exists and git is available
      #       ssh $USERNAME@$HOST "mkdir -p $DEPLOY_PATH && (command -v git >/dev/null 2>&1 || (apt-get update -y && apt-get install -y git))"

      #       # Clone the repo if missing, otherwise update to latest main
      #       ssh $USERNAME@$HOST "if [ -d $DEPLOY_PATH/.git ]; then
      #         cd $DEPLOY_PATH && git fetch --all --prune && git reset --hard origin/main
      #       else
      #         rm -rf $DEPLOY_PATH && git clone --depth 1 \"$GIT_URL\" \"$DEPLOY_PATH\"
      #       fi"

      #       # Optionally create .env from secret (if provided)
      #       if [ -n "$ENV_FILE" ]; then
      #         echo "$ENV_FILE" | ssh $USERNAME@$HOST "cat > $DEPLOY_PATH/applications/compose/environments/vps/.env"
      #       fi

      #       # Pull images and deploy using the cloned repository
      #       ssh $USERNAME@$HOST "cd $DEPLOY_PATH && \
      #         docker compose -f applications/compose/environments/vps/docker-compose.yaml pull && \
      #         docker compose -f applications/compose/environments/vps/docker-compose.yaml up -d --remove-orphans"
          
      # - name: Verify Deployment
      #   env:
      #     HOST: ${{ secrets.SSH_HOST }}
      #     USERNAME: ${{ secrets.SSH_USERNAME }}
      #   run: |
      #     # Check service status
      #     ssh $USERNAME@$HOST "docker compose -f /opt/homelab/applications/compose/environments/vps/docker-compose.yaml ps --format json" > status.json
          
      #     # Parse status and check for errors
      #     if grep -q '"State":"running"' status.json; then
      #       echo "Services are running successfully"
      #     else
      #       echo "Service verification failed"
      #       cat status.json
      #       exit 1
      #     fi
          
      #     # Check logs for any errors
      #     ssh $USERNAME@$HOST "docker compose -f /opt/homelab/applications/compose/environments/vps/docker-compose.yaml logs --tail=100" > logs.txt
      #     if grep -i "error\|failed" logs.txt; then
      #       echo "Found errors in service logs"
      #       cat logs.txt
      #       exit 1
      #     fi
